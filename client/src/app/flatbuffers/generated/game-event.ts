// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';
import {EventType} from './event-type';

export class GameEvent {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):GameEvent {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGameEvent(bb:flatbuffers.ByteBuffer, obj?:GameEvent):GameEvent {
  return (obj || new GameEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGameEvent(bb:flatbuffers.ByteBuffer, obj?:GameEvent):GameEvent {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GameEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

eventType():EventType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : EventType.NONE;
}

event<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startGameEvent(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addEventType(builder:flatbuffers.Builder, eventType:EventType) {
  builder.addFieldInt8(0, eventType, EventType.NONE);
}

static addEvent(builder:flatbuffers.Builder, eventOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, eventOffset, 0);
}

static endGameEvent(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishGameEventBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedGameEventBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createGameEvent(builder:flatbuffers.Builder, eventType:EventType, eventOffset:flatbuffers.Offset):flatbuffers.Offset {
  GameEvent.startGameEvent(builder);
  GameEvent.addEventType(builder, eventType);
  GameEvent.addEvent(builder, eventOffset);
  return GameEvent.endGameEvent(builder);
}
}
