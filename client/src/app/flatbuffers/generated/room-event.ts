// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';
import {EventType} from './event-type';
import {Player} from './player';

export class RoomEvent {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;

  __init(i: number, bb: flatbuffers.ByteBuffer): RoomEvent {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsRoomEvent(bb: flatbuffers.ByteBuffer, obj?: RoomEvent): RoomEvent {
    return (obj || new RoomEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsRoomEvent(bb: flatbuffers.ByteBuffer, obj?: RoomEvent): RoomEvent {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new RoomEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  type(): EventType {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readInt8(this.bb_pos + offset) : EventType.Added;
  }

  id(): string | null
  id(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null
  id(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  owner(obj?: Player): Player | null {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? (obj || new Player()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
  }

  players(index: number, obj?: Player): Player | null {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset ? (obj || new Player()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
  }

  playersLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  static startRoomEvent(builder: flatbuffers.Builder) {
    builder.startObject(4);
  }

  static addType(builder: flatbuffers.Builder, type: EventType) {
    builder.addFieldInt8(0, type, EventType.Added);
  }

  static addId(builder: flatbuffers.Builder, idOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, idOffset, 0);
  }

  static addOwner(builder: flatbuffers.Builder, ownerOffset: flatbuffers.Offset) {
    builder.addFieldOffset(2, ownerOffset, 0);
  }

  static addPlayers(builder: flatbuffers.Builder, playersOffset: flatbuffers.Offset) {
    builder.addFieldOffset(3, playersOffset, 0);
  }

  static createPlayersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!);
    }
    return builder.endVector();
  }

  static startPlayersVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static endRoomEvent(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static finishRoomEventBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {
    builder.finish(offset);
  }

  static finishSizePrefixedRoomEventBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {
    builder.finish(offset, undefined, true);
  }

}
