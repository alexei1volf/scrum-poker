// automatically generated by the FlatBuffers compiler, do not modify

package com.example.scrumpoker.data;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class PlayerEvent extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static PlayerEvent getRootAsPlayerEvent(ByteBuffer _bb) { return getRootAsPlayerEvent(_bb, new PlayerEvent()); }
  public static PlayerEvent getRootAsPlayerEvent(ByteBuffer _bb, PlayerEvent obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PlayerEvent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte eventType() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Table event(Table obj) { int o = __offset(6); return o != 0 ? __union(obj, o + bb_pos) : null; }

  public static int createPlayerEvent(FlatBufferBuilder builder,
      byte event_type,
      int eventOffset) {
    builder.startTable(2);
    PlayerEvent.addEvent(builder, eventOffset);
    PlayerEvent.addEventType(builder, event_type);
    return PlayerEvent.endPlayerEvent(builder);
  }

  public static void startPlayerEvent(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addEventType(FlatBufferBuilder builder, byte eventType) { builder.addByte(0, eventType, 0); }
  public static void addEvent(FlatBufferBuilder builder, int eventOffset) { builder.addOffset(1, eventOffset, 0); }
  public static int endPlayerEvent(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishPlayerEventBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedPlayerEventBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PlayerEvent get(int j) { return get(new PlayerEvent(), j); }
    public PlayerEvent get(PlayerEvent obj, int j) {  return obj.__assign(Table.__indirect(__element(j), bb), bb); }
  }
}

